// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Utils$ReasonSsr = require("./Utils.bs.js");
var Dropdown$ReasonSsr = require("./Dropdown.bs.js");

var component = Curry._1(Utils$ReasonSsr.RR[/* statelessComponent */0], "CitySelector-ReasonSsr");

function changeCity(cityName) {
  return ReasonReact.Router[/* push */0]("/" + cityName);
}

function make(cities, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var cityNames = $$Array.of_list(List.map((function (city) {
                          return /* InputMap */Block.__(0, [Dropdown$ReasonSsr.inputOptionToJs(/* record */[
                                          /* label */city[/* name */1],
                                          /* value */city[/* name */1],
                                          /* className */city[/* name */1]
                                        ])]);
                        }), cities));
              return ReasonReact.element(undefined, undefined, Dropdown$ReasonSsr.make(undefined, cityNames, (function (item) {
                                return changeCity(item.value);
                              }), /* array */[]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.changeCity = changeCity;
exports.make = make;
/* component Not a pure module */
